# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: proto/ruby_vagrant/ruby-server.proto

require 'google/protobuf'

require 'google/protobuf/empty_pb'
require 'google/protobuf/any_pb'
require 'google/rpc/error_details_pb'
require 'plugin_pb'


descriptor_data = "\n$proto/ruby_vagrant/ruby-server.proto\x12\x11hashicorp.vagrant\x1a\x1bgoogle/protobuf/empty.proto\x1a\x19google/protobuf/any.proto\x1a\x1egoogle/rpc/error_details.proto\x1a\x0cplugin.proto\")\n\x11GetPluginsRequest\x12\x14\n\x0cproject_path\x18\x01 \x01(\t\"@\n\x12GetPluginsResponse\x12*\n\x07plugins\x18\x01 \x03(\x0b\x32\x19.hashicorp.vagrant.Plugin\"\xcb\x02\n\x06Plugin\x12\x0c\n\x04name\x18\x01 \x01(\t\x12,\n\x04type\x18\x02 \x01(\x0e\x32\x1e.hashicorp.vagrant.Plugin.Type\x12%\n\x07options\x18\x03 \x01(\x0b\x32\x14.google.protobuf.Any\"\xdd\x01\n\x04Type\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x0b\n\x07\x43OMMAND\x10\x01\x12\x10\n\x0c\x43OMMUNICATOR\x10\x02\x12\t\n\x05GUEST\x10\x03\x12\x08\n\x04HOST\x10\x04\x12\x0c\n\x08PROVIDER\x10\x05\x12\x0f\n\x0bPROVISIONER\x10\x06\x12\x10\n\x0cSYNCEDFOLDER\x10\x07\x12\x11\n\rAUTHENTICATOR\x10\x08\x12\x0f\n\x0bLOGPLATFORM\x10\t\x12\r\n\tLOGVIEWER\x10\n\x12\n\n\x06MAPPER\x10\x0b\x12\n\n\x06\x43ONFIG\x10\x0c\x12\x0e\n\nPLUGININFO\x10\r\x12\x08\n\x04PUSH\x10\x0e\"\'\n\x17ParseVagrantfileRequest\x12\x0c\n\x04path\x18\x01 \x01(\t\"P\n\x1bParseVagrantfileProcRequest\x12\x31\n\x04proc\x18\x01 \x01(\x0b\x32#.hashicorp.vagrant.sdk.Args.ProcRef\"J\n\x18ParseVagrantfileResponse\x12.\n\x04\x64\x61ta\x18\x01 \x01(\x0b\x32 .hashicorp.vagrant.sdk.Args.Hash\"Y\n\x1cParseVagrantfileSubvmRequest\x12\x39\n\x05subvm\x18\x01 \x01(\x0b\x32*.hashicorp.vagrant.sdk.Config.RawRubyValue\"n\n\x1fParseVagrantfileProviderRequest\x12\x39\n\x05subvm\x18\x01 \x01(\x0b\x32*.hashicorp.vagrant.sdk.Config.RawRubyValue\x12\x10\n\x08provider\x18\x02 \x01(\t2\xf6\x04\n\x0bRubyVagrant\x12Y\n\nGetPlugins\x12$.hashicorp.vagrant.GetPluginsRequest\x1a%.hashicorp.vagrant.GetPluginsResponse\x12k\n\x10ParseVagrantfile\x12*.hashicorp.vagrant.ParseVagrantfileRequest\x1a+.hashicorp.vagrant.ParseVagrantfileResponse\x12s\n\x14ParseVagrantfileProc\x12..hashicorp.vagrant.ParseVagrantfileProcRequest\x1a+.hashicorp.vagrant.ParseVagrantfileResponse\x12u\n\x15ParseVagrantfileSubvm\x12/.hashicorp.vagrant.ParseVagrantfileSubvmRequest\x1a+.hashicorp.vagrant.ParseVagrantfileResponse\x12{\n\x18ParseVagrantfileProvider\x12\x32.hashicorp.vagrant.ParseVagrantfileProviderRequest\x1a+.hashicorp.vagrant.ParseVagrantfileResponse\x12\x36\n\x04Stop\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.EmptyBAZ?github.com/hashicorp/vagrant/internal/server/proto/ruby_vagrantb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
    ["google.protobuf.Any", "google/protobuf/any.proto"],
    ["hashicorp.vagrant.sdk.Args.ProcRef", "plugin.proto"],
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Hashicorp
  module Vagrant
    GetPluginsRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hashicorp.vagrant.GetPluginsRequest").msgclass
    GetPluginsResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hashicorp.vagrant.GetPluginsResponse").msgclass
    Plugin = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hashicorp.vagrant.Plugin").msgclass
    Plugin::Type = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hashicorp.vagrant.Plugin.Type").enummodule
    ParseVagrantfileRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hashicorp.vagrant.ParseVagrantfileRequest").msgclass
    ParseVagrantfileProcRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hashicorp.vagrant.ParseVagrantfileProcRequest").msgclass
    ParseVagrantfileResponse = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hashicorp.vagrant.ParseVagrantfileResponse").msgclass
    ParseVagrantfileSubvmRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hashicorp.vagrant.ParseVagrantfileSubvmRequest").msgclass
    ParseVagrantfileProviderRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("hashicorp.vagrant.ParseVagrantfileProviderRequest").msgclass
  end
end
